services:

  ### Microservices ###

  # API Gateway
  api-gateway:
    container_name: api-gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8500:8500"
    networks:
      - movieservices
    depends_on:
      - users-service
      - cinemas-service
      - screenings-service-1
      - reservations-service-1
      - reservations-service-2
      - reservations-service-3
      - payments-service
      - pricing-service
      - notifications-service
    restart: unless-stopped

  # Users service
  users-service:
    container_name: users-service
    build:
      context: ./users
      dockerfile: Dockerfile
    ports:
      - "8400:8400"
    networks:
      - movieservices
    depends_on:
      - customersdb
      - kafka
    environment:
      - DB_ADDRESS=jdbc:postgresql://customersdb:5432/usersdb
      - DB_USER=user
      - DB_PASSWORD=secret
      - PORT=8400
    restart: unless-stopped

  # Cinemas service
  cinemas-service:
    container_name: cinemas-service
    build:
      context: ./cinemas
      dockerfile: Dockerfile
    ports:
      - "8150:8150"
    networks:
      - movieservices
    environment:
      - DB_ADDRESS=jdbc:mysql://cinemasdb:3306/cinemasdb
      - DB_USER=user
      - DB_PASSWORD=secret
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - PORT=8150
    depends_on:
      - cinemasdb
      - kafka
    restart: unless-stopped

  # Screenings service
  screenings-service-1:
    container_name: screenings-service-1
    build:
      context: ./screenings
      dockerfile: Dockerfile
    ports:
      - "8300:8300"
    networks:
      - movieservices
    environment:
      - DB_ADDRESS=jdbc:postgresql://screeningsdb:5432/screeningsdb
      - DB_USER=user
      - DB_PASSWORD=secret
      - MOVIES_SERVICE_URL=http://movies-service:8100/movies
      - CINEMAS_SERVICE_URL=http://cinemas-service:8150/cinemas
      - PRICING_SERVICE_URL=http://pricing-service:8350/pricing
      - KAFKA_ADDRESS=kafka:9092
      - KAFKA_GROUP_ID=screenings-group
      - PORT=8300
    depends_on:
      - screeningsdb
      - kafka
    restart: unless-stopped

  # Movies service
  movies-service:
    container_name: movies-service
    build:
      context: ./movies
      dockerfile: Dockerfile
    ports:
      - "8100:8100"
    networks:
      - movieservices
    environment:
      - DB_ADDRESS=jdbc:postgresql://moviesdb:5432/moviesdb
      - DB_USER=user
      - DB_PASSWORD=secret
      - PORT=8100
    depends_on:
      - moviesdb
    restart: unless-stopped

  # Reservations service
  reservations-service-1:
    container_name: reservations-service-1
    build:
      context: ./reservations
      dockerfile: Dockerfile
    ports:
      - "8250:8250"
    networks:
      - movieservices
    environment:
      - DATABASE_URL=jdbc:postgresql://reservationsdb:5432/reservationsdb
      - DATABASE_USER=user
      - DATABASE_PASSWORD=secret
      - SCREENINGS_URL=http://screenings-service:8300/screenings
      - CINEMAS_URL=http://cinemas-service:8150
      - KAFKA_ADDRESS=kafka:9092
      - KAFKA_GROUP_ID=reservations-group
      - PORT=8250
    depends_on:
      - reservationsdb
      - kafka
    restart: unless-stopped

  reservations-service-2:
    container_name: reservations-service-2
    build:
      context: ./reservations
      dockerfile: Dockerfile
    ports:
      - "8251:8250"
    networks:
      - movieservices
    environment:
      - DATABASE_URL=jdbc:postgresql://reservationsdb:5432/reservationsdb
      - DATABASE_USER=user
      - DATABASE_PASSWORD=secret
      - SCREENINGS_URL=http://screenings-service:8300/screenings
      - CINEMAS_URL=http://cinemas-service:8150
      - KAFKA_ADDRESS=kafka:9092
      - KAFKA_GROUP_ID=reservations-group
      - PORT=8251
    depends_on:
      - reservationsdb
      - kafka
    restart: unless-stopped

  reservations-service-3:
    container_name: reservations-service-3
    build:
      context: ./reservations
      dockerfile: Dockerfile
    ports:
      - "8252:8250"
    networks:
      - movieservices
    environment:
      - DATABASE_URL=jdbc:postgresql://reservationsdb:5432/reservationsdb
      - DATABASE_USER=user
      - DATABASE_PASSWORD=secret
      - SCREENINGS_URL=http://screenings-service:8300/screenings
      - CINEMAS_URL=http://cinemas-service:8150
      - KAFKA_ADDRESS=kafka:9092
      - KAFKA_GROUP_ID=reservations-group
      - PORT=8252
    depends_on:
      - reservationsdb
      - kafka
    restart: unless-stopped

  # Payments service
  payments-service:
    build:
      context: ./payments
      dockerfile: Dockerfile
    ports:
      - "8200:8200"
    networks:
      - movieservices
    environment:
      - KAFKA_ADDRESS=kafka:9092
      - KAFKA_GROUP_ID=payments-group
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      - DB_NAME=paymentsdb
      - DB_HOST=paymentsdb
      - PORT=:8200
    depends_on:
      - paymentsdb
      - kafka
    restart: unless-stopped

  # Pricing service
  pricing-service:
    container_name: pricing-service
    build:
      context: ./pricing
      dockerfile: Dockerfile
    ports:
      - "8350:8350"
    networks:
      - movieservices
    environment:
      - PORT=:8350
    depends_on:
      - kafka
    restart: unless-stopped

  # Notifications service
  notifications-service:
    container_name: notifications-service
    build:
      context: ./notifications
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    networks:
      - movieservices
    depends_on:
      - kafka
    restart: unless-stopped

  ### Databases ###

  # Customers Database
  customersdb:
    container_name: customersdb
    image: postgres:latest
    environment:
      - POSTGRES_ROOT_PASSWORD=secret
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=user
      - POSTGRES_DB=usersdb
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - movieservices
    restart: unless-stopped

  # Payments Database
  paymentsdb:
    container_name: paymentsdb
    image: postgres:latest
    environment:
      - POSTGRES_ROOT_PASSWORD=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=paymentsdb
    volumes:
      - postgres:/data/postgres
    ports:
      - "5445:5432"
    networks:
      - movieservices
    restart: unless-stopped

  # Screenings Database
  screeningsdb:
    container_name: screeningsdb
    image: postgres:latest
    environment:
      - POSTGRES_ROOT_PASSWORD=secret
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=user
      - POSTGRES_DB=screeningsdb
    volumes:
      - postgres:/data/postgres
    ports:
      - "5443:5432"
    networks:
      - movieservices
    restart: unless-stopped

  # Reservations Database
  reservationsdb:
    container_name: reservationsdb
    image: postgres:latest
    environment:
      - POSTGRES_ROOT_PASSWORD=secret
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=user
      - POSTGRES_DB=reservationsdb
    volumes:
      - postgres:/data/postgres
    ports:
      - "5444:5432"
    networks:
      - movieservices
    restart: unless-stopped

  # Cinemas Database
  cinemasdb:
    container_name: cinemasdb
    image: mysql:latest
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_PASSWORD=secret
      - MYSQL_USER=user
      - MYSQL_DATABASE=cinemasdb
    ports:
      - "3306:3306"
    volumes:
      - mysql:/var/lib/mysql
    networks:
      - movieservices
    restart: unless-stopped

  # Movies Database
  moviesdb:
    container_name: moviesdb
    image: postgres:latest
    environment:
      - POSTGRES_ROOT_PASSWORD=secret
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=user
      - POSTGRES_DB=moviesdb
    volumes:
      - postgres:/data/postgres
    ports:
      - "5453:5432"
    networks:
      - movieservices
    restart: unless-stopped

  # NGINX
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    networks:
      - movieservices
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    links:
      - api-gateway
      - users-service
      - cinemas-service
      - screenings-service-1
      - reservations-service-1
      - reservations-service-2
      - reservations-service-3
      - payments-service
      - pricing-service
      - notifications-service
    depends_on:
      - api-gateway
      - users-service
      - cinemas-service
      - screenings-service-1
      - reservations-service-1
      - reservations-service-2
      - reservations-service-3
      - payments-service
      - pricing-service
      - notifications-service
    restart: unless-stopped

  ### Database Management Tools ###
  # MySQL Admin
  mysqladmin:
    container_name: mysqladmin
    image: phpmyadmin/phpmyadmin:latest
    environment:
      PMA_HOST: cinemasdb
      PMA_PORT: 3306
      PMA_USER: user
      PMA_PASSWORD: secret
    ports:
      - "8001:80"
    networks:
      - movieservices
    restart: unless-stopped

    # PostgreSQL Admin page
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - movieservices
    restart: unless-stopped

  ### Apache Kafka ###
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - movieservices

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    expose:
      - "9092"
    depends_on:
      - zookeeper
    networks:
      - movieservices

networks:
  movieservices:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mysql:
  nginx:
